{"remainingRequest":"C:\\Users\\LimJaeHyeok\\Desktop\\tazan-project\\Tazan_Front\\vue2-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\LimJaeHyeok\\Desktop\\tazan-project\\Tazan_Front\\vue2-front\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\LimJaeHyeok\\Desktop\\tazan-project\\Tazan_Front\\vue2-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\LimJaeHyeok\\Desktop\\tazan-project\\Tazan_Front\\vue2-front\\src\\components\\main\\main.vue?vue&type=template&id=5e2104ef&","dependencies":[{"path":"C:\\Users\\LimJaeHyeok\\Desktop\\tazan-project\\Tazan_Front\\vue2-front\\src\\components\\main\\main.vue","mtime":1635147830316},{"path":"C:\\Users\\LimJaeHyeok\\Desktop\\tazan-project\\Tazan_Front\\vue2-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\LimJaeHyeok\\Desktop\\tazan-project\\Tazan_Front\\vue2-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\LimJaeHyeok\\Desktop\\tazan-project\\Tazan_Front\\vue2-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\LimJaeHyeok\\Desktop\\tazan-project\\Tazan_Front\\vue2-front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}